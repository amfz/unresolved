<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code-journal on unresolved</title>
    <link>/tags/code-journal/</link>
    <description>Recent content in code-journal on unresolved</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/code-journal/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Setting up rJava properly</title>
      <link>/post/fixing-rjava-install/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/fixing-rjava-install/</guid>
      <description>Back to working with RStudio Server on an EC2 instance. This instance is running on Ubuntu 18.04, installed from Louis Aslett&amp;rsquo;s RStudio AMIs. The AMIs come with the Java 8 Runtime Environment, which I assumed meant that I could install and Java-dependent R packages out of the box.
That turned out not to be the case, and I hit a snag trying to install tabulizer:
ERROR: dependency ‘rJava’ is not available for package ‘tabulizerjars’Then, trying to install rJava nets this error:</description>
    </item>
    
    <item>
      <title>R, AWS, and other letters</title>
      <link>/post/r-aws/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/r-aws/</guid>
      <description>Got a crash course in working with Amazon Web Services today.
What I was trying to do Scale up a text processing project by moving to AWS. The scale-up will need an estimated 100 GB of storage, and an unknown amount of computing power.
What I Did 1. Create a new EC2 instance EC2 stands for Elastic Compute Cloud and provides pay-as-you-go virtual computing environments. There are a ton of features, but the main ones to pay attention to for now are:</description>
    </item>
    
    <item>
      <title>RMarkdown tricks</title>
      <link>/post/rmd-tricks/</link>
      <pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/rmd-tricks/</guid>
      <description>Quick, incomplete notes on things that make life easier when publishing to R markdown and xaringan.
Managing Citations and References Confession: Up til recently, I manually managed all my figure references and citations. Moving a table around meant updating the number in the text. Bibliographic references, similarly, were diligently typed up, or, if I was lucky, copy-pasted.
Yeah, not doing that anymore.
If you name r chunks (e.g., {r fig1 [code here]}) you can refer to them in the main text with \@ref(fig:fig1) for figures or \@ref(tab:mytable) for tables.</description>
    </item>
    
    <item>
      <title>Scraping two-column PDFs</title>
      <link>/post/scraping-two-column-pdfs/</link>
      <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/scraping-two-column-pdfs/</guid>
      <description>What I was trying to do Scrape text from PDFs where the text was laid out in two columns.
What I tried first: pdftools and readr Many text scraping tutorials in R recommend using pdftools to extract text from a PDF file. So far, so straightforward.
library(pdftools)library(tidyverse)text &amp;lt;- pdf_text(&amp;quot;my_file.pdf&amp;quot;)That results in a character vector, but it still needs cleaning &amp;ndash; each element in the vector is a chunk of text, and there&amp;rsquo;s loads of whitespace throughout.</description>
    </item>
    
  </channel>
</rss>